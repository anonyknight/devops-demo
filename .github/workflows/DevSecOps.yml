name: DevSecOps

# on:
#   push:
    # paths:
    #   - 'src'

on: 
  pull_request:

jobs:
  # https://github.com/microsoft/DevSkim-Action
  automated_code_review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: DevSkim
      uses: microsoft/DevSkim-Action@v1
      with:
        directory-to-scan: src/
        should-scan-archives: false
        output-filename: devskim-results.sarif
    - name: Upload Test results
      uses: actions/upload-artifact@master
      with:
        name: DevSkim report
        path: ${{github.workspace}}/devskim-results.sarif

  # https://github.com/marketplace/actions/trufflehog-actions-scan
  sensitive_information_scan:
    name: Sensitive Information Scan
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Trufflehog
      uses: edplato/trufflehog-actions-scan@master
      with:
        scanArguments: "--regex --entropy=False --max_depth=5 --rules /regexes.json" # Add custom options here*

  # https://github.com/marketplace/actions/markdown-linting-action
  static_code_analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Markdownlint
      uses: docker://avtodev/markdown-lint:v1 # fastest way
      with:
        rules: '/lint/rules/changelog.js'
        config: '/lint/config/changelog.yml'
        args: './src/docs/*.md'

  # https://github.com/dependency-check/Dependency-Check_Action
  software_component_analysis:
    runs-on: ubuntu-latest
    name: Dependency Check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'test'
          path: '.'
          format: 'HTML'    
          args: >
            --failOnCVSS 7
            --enableRetired
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Dependency Check report
           path: ${{github.workspace}}/reports

  # https://github.com/marketplace/actions/terraform-compliance
  compliance_as_code:
    name: Compliance As Code
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
    # Checkout the repository to the GitHub Actions runner
      - uses: actions/checkout@v2
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - uses: hashicorp/setup-terraform@v1
      - uses: terraform-compliance/github_action@main

      - name: Prepare GCP credentials
        run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | base64 -d > GOOGLE_APPLICATION_CREDENTIALS.json

      - name: terraform plan
        id: plan
        run: |
          terraform init && terraform plan -out=plan.out && terraform show -json plan.out > plan.out.json
        env:
          GOOGLE_APPLICATION_CREDENTIALS: GOOGLE_APPLICATION_CREDENTIALS.json
          TF_VAR_project_id: ${{ secrets.TF_VAR_project_id }}
          TF_VAR_region: ${{ secrets.TF_VAR_region }}
          TF_VAR_zone: ${{ secrets.TF_VAR_zone }}
          TF_VAR_gce_ssh_user: ${{ secrets.TF_VAR_gce_ssh_user }}
          TF_VAR_gce_ssh_pub_key: ${{ secrets.TF_VAR_gce_ssh_pub_key}}
          TF_VAR_gce_ssh_private_key: ${{ secrets.TF_VAR_gce_ssh_private_key }}

      - name: terraform-compliance
        run: |
          terraform-compliance -p plan.out.json -f git:https://github.com/terraform-compliance/user-friendly-features.git

  # https://github.com/marketplace/actions/owasp-zap-baseline-scan
  dynamic_application_security_testing:
    needs: compliance_as_code # Avoid terraform conflict
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
      - name: Prepare GCP credentials
        run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | base64 -d > GOOGLE_APPLICATION_CREDENTIALS.json

      - name: Read Server IP from Terraform
        id: plan
        # Get the server IP
        run: |
          terraform init
          terraform output instance_ip_addr | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" > server_ip.txt
          echo "SERVER_IP=$(head -n 1 server_ip.txt)" >> $GITHUB_ENV
          echo $SERVER_IP
        env:
          GOOGLE_APPLICATION_CREDENTIALS: GOOGLE_APPLICATION_CREDENTIALS.json
          TF_VAR_project_id: ${{ secrets.TF_VAR_project_id }}
          TF_VAR_region: ${{ secrets.TF_VAR_region }}
          TF_VAR_zone: ${{ secrets.TF_VAR_zone }}
          TF_VAR_gce_ssh_user: ${{ secrets.TF_VAR_gce_ssh_user }}
          TF_VAR_gce_ssh_pub_key: ${{ secrets.TF_VAR_gce_ssh_pub_key}}
          TF_VAR_gce_ssh_private_key: ${{ secrets.TF_VAR_gce_ssh_private_key }}

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.5.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'https://${{ env.SERVER_IP }}:8000'
          cmd_options: '-a'